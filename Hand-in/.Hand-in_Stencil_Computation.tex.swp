\documentclass[11pt]{article}
%Gummi|065|=)
\title{\textbf{Stencil Computation: A Approach}}
\author{Mihail Bogojeski\\
		Armin Puffler}
\date{}
\begin{document}

\maketitle

\section*{Problem Statement}

The problem we are to work on consists of a parallel 2-d stencil computation.\\
Given an $n \times m$ matrix, with boundary conditions given in 4 vectors, we are to iterate over the matrix and update every field for a given number of iterations.\\ 
The update function consists of a given function $f$ which computes the value of the cell $c$ by taking the average value of its 'Von Neumann neighborhood'. In essence this operation is identical to '2D Jacobi Iteration'.\\
This operation is not trivial since once a cell is updated, it can no longer be used by the next cell to compute its average. Performance and memory optimizations are thus slightly hindered.\\
 
\section*{Hypothesis}

We want to show that there are different approaches to solving this problem, not every one of them has the same efficiency though. We are comparing varying versions of a few basic methods, while demonstrating that column- and diagonal-based traversions of a matrix do not intertwine readily with the buffer-system of the programming language we are basing this experiment on.

\section*{Explanation of the algorithm: 2D-Stencil Computation: }

The basic algorithm is simple: The matrix (e.g.: each cell of the matrix) is iteratively being updated by a function as until some condition is met. In this case, we have a certain count of iterations that must be fulfilled until the program is to terminate.
The function $f$ that carries out said update on a cell $c$, defined by coordinates $x, y$ takes the 4 Neumann neighbors and determines its average:

\[  f(x, y) = \frac{a_{(x-1)y} + a_{x_+1)y} + a_{x(y+1)} + a_{x(y-1)}}{4}  \]

This function (in the following snippet called "update") will, in its most basic configuration be applied to the matrix as follows:

\begin{verbatim}

#Initialises a nxm matrix with random values.
matrix = [[random.random() * n] * m]  
for n in columns:
  for m in rows:
  	matrix[n][m]update(n,m)
\end{verbatim}





	
	
	


 
Support for two high-level {\LaTeX} building systems, \emph{rubber}\footnote{https://launchpad.net/rubber/} \& \emph{latexmk}\footnote{http://www.phys.psu.edu/{\textasciitilde}collins/software/latexmk-jcc/} has been added to this release as well. Your preferred typesetter can be configured through the Compilation tab in the Preferences menu. Typesetters that are not installed on your system will not be selectable. 

Added for your viewing convenience is a continuous preview mode for the PDF. This mode is enabled by default, but can also be disabled through the \emph{(View $\rightarrow$ Page layout in preview)} menu. Complementary to this feature is SyncTeX integration, which allows you to synchronize the position in your editor with the PDF preview. 

\section{Feedback}
We hope you will enjoy using this release as much as we enjoyed creating it. If you have comments, suggestions or wish to report an issue you are experiencing - contact us at: \emph{http://gummi.midnightcoding.org}.

\section{One more thing}
If you are wondering where your old default text is; it has been stored as a template. The template menu can be used to access and restore it. 

\end{document}
